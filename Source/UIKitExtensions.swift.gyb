%{
frameworks = ["UIKit", "ReactiveCocoa"]
reusableViewClasses = ["UICollectionReusableView", "UITableViewHeaderFooterView", "UITableViewCell"]

extensionInfo = {
    "UIView": {
        "alpha": {"type": "CGFloat"},
        "isHidden": {"type": "Bool", "was": "hidden"},
        "isUserInteractionEnabled": {"type": "Bool", "was": "userInteractionEnabled"},
        "backgroundColor": {"type": "UIColor?"}
    },
    "UILabel": {
        "text": {"type": "String?"},
        "attributedText": {"type": "AttributedString?"},
        "textColor": {"type": "UIColor"}
    },
    "UIBarItem": {
        "isEnabled": {"type": "Bool", "was": "enabled"}
    },
    "UIControl": {
        "isEnabled": {"type": "Bool", "was": "enabled"},
        "isHighlighted": {"type": "Bool", "was": "highlighted"},
        "isSelected": {"type": "Bool", "was": "selected"}
    },
    "UIImageView": {
        "image": {"type": "UIImage?"},
        "highlightedImage": {"type": "UIImage?"}
    },
    "UIProgressView": {
        "progress": {"type": "Float"}
    },
    "UISwitch": {
        "isOn": {"isControl": True, "type": "Bool", "was": "on"}
    },
    "UIDatePicker": {
        "date": {"isControl": True, "type": "Date"}
    }
}

}%
% for framework in frameworks:
import ${framework}
%end

% for reusableViewClass in reusableViewClasses:
extension ${reusableViewClass}: Reusable {}
%end

% for extClass, properties in extensionInfo.items():
extension ${extClass} {

    % for (key, attributes) in properties.items():
    % if "renamed" in attributes:
    @available(*, unavailable, renamed:"rex_${key}")
    public var rex_${attributes["renamed"]}: MutableProperty<${attributes["type"]}> { fatalError() }

    %end
    public var rex_${key}: MutableProperty<${attributes["type"]}> {
    % if "isControl" in attributes:
        return UIControl.rex_value(self,
                                   getter: { $0.${key} },
                                   setter: { $0.${key} = $1 })
    % else:
        return associatedProperty(self,
                                  key: &rac${extClass}${key[0].upper() + key[1:]}Key,
                                  initial: { $0.${key} },
                                  setter: { $0.${key} = $1 })
    % end
	}

	%end
}

%end
% for extClass, properties in extensionInfo.items():
% for (key, attributes) in properties.items():
% if not "isControl" in attributes:
private var rac${extClass}${key[0].upper() + key[1:]}Key = 0
%end
%end
%end
